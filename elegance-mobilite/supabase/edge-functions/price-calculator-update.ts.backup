const CORS_HEADERS = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Methods': 'POST, OPTIONS',
  'Access-Control-Allow-Headers': 'Content-Type'
};

export const onRequest = async (req: Request, supabaseClient: any) => {
  // CORS preflight
  if (req.method === 'OPTIONS') {
    return new Response(null, { status: 204, headers: CORS_HEADERS });
  }

  // Vérification rapide du client
  if (!supabaseClient?.from) {
    return new Response(JSON.stringify({
      error: 'Client Supabase invalide'
    }), { status: 500, headers: CORS_HEADERS });
  }

  try {
    // Timeout court
    const controller = new AbortController();
    const timeout = setTimeout(() => controller.abort(), 1000);

    // Parsing du body
    const payload = await req.json();
    if (!payload?.new?.vehicle_type) {
      return new Response(JSON.stringify({
        error: 'vehicle_type requis'
      }), { status: 400, headers: CORS_HEADERS });
    }

    // Requête avec signal d'abort
    const { data, error } = await supabaseClient
      .from('rates')
      .select('base_price,price_per_km,min_price')
      .eq('vehicle_type', payload.new.vehicle_type)
      .single();

    clearTimeout(timeout);
      
      // Gérer le cas où result est undefined ou null
      if (!result) {
        return new Response(JSON.stringify({
          error: 'Réponse invalide de Supabase',
          details: 'Résultat null ou undefined'
        }), {
          status: 500,
          headers: CORS_HEADERS
        });
      }

      // Si on a une erreur dans le result
      if ('error' in result) {
        return new Response(JSON.stringify({
          error: 'Erreur de requête',
          details: result.error,
          query: {
            table: 'rates',
            vehicle_type: payload.new.vehicle_type
          }
        }), {
          status: 500,
          headers: CORS_HEADERS
        });
      }

    if (error) {
      return new Response(JSON.stringify({
        error: 'Erreur base de données',
        details: error
      }), { status: 500, headers: CORS_HEADERS });
    }

    if (!data) {
      return new Response(JSON.stringify({
        error: 'Tarif non trouvé',
        vehicle_type: payload.new.vehicle_type
      }), { status: 404, headers: CORS_HEADERS });
    }

    return new Response(JSON.stringify({
      success: true,
      rate: data
      }), {
        status: 200,
        headers: CORS_HEADERS
      });


  } catch (error: unknown) {
    const message = error instanceof Error ? error.message : 'Erreur inconnue';
    return new Response(JSON.stringify({
      error: 'Erreur serveur',
      details: message
    }), {
      status: 500,
      headers: CORS_HEADERS
    });
  }
};
