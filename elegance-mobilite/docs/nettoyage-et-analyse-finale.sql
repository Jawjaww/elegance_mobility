-- NETTOYAGE ET ANALYSE FINALE
-- Script √† ex√©cuter dans l'interface Supabase SQL Editor

-- üßπ √âTAPE 1 : Nettoyer l'utilisateur de test
DO $$
DECLARE
  test_user_id uuid := 'dc62bd52-0ed7-495b-9055-22635d6c5e74';
BEGIN
  -- Supprimer de drivers si existe
  DELETE FROM public.drivers WHERE user_id = test_user_id;
  
  -- Supprimer de users si existe  
  DELETE FROM public.users WHERE id = test_user_id;
  
  RAISE NOTICE '‚úÖ Utilisateur de test nettoy√© : %', test_user_id;
END $$;

-- üîç √âTAPE 2 : D√©couvrir la structure R√âELLE de la table users
SELECT 
  'STRUCTURE TABLE USERS' as info,
  column_name,
  data_type,
  is_nullable,
  column_default
FROM information_schema.columns 
WHERE table_schema = 'public' 
AND table_name = 'users'
ORDER BY ordinal_position;

-- üîç √âTAPE 2b : Analyse d√©taill√©e des champs vehicle dans drivers
SELECT 
  'ANALYSE CHAMPS VEHICLE' as info,
  column_name,
  data_type,
  is_nullable,
  column_default
FROM information_schema.columns 
WHERE table_schema = 'public' 
AND table_name = 'drivers'
AND column_name LIKE '%vehicle%'
ORDER BY column_name;

-- üîç √âTAPE 3 : V√©rifier toutes les contraintes NOT NULL
SELECT 
  'CONTRAINTES NOT NULL CRITIQUES' as info,
  column_name,
  is_nullable,
  column_default
FROM information_schema.columns 
WHERE table_schema = 'public' 
AND table_name = 'drivers'
AND is_nullable = 'NO'
AND column_default IS NULL  -- Champs requis sans valeur par d√©faut
ORDER BY column_name;

-- üîç √âTAPE 4 : Test d'insertion r√©elle pour confirmer le probl√®me
DO $$
DECLARE
  test_user_id uuid := gen_random_uuid();
  error_message text;
  user_columns text;
BEGIN
  RAISE NOTICE 'üß™ TEST D''INSERTION MINIMALE';
  RAISE NOTICE 'User ID test : %', test_user_id;
  
  -- D√©couvrir quelles colonnes existent dans public.users
  SELECT string_agg(column_name, ', ' ORDER BY ordinal_position) 
  INTO user_columns
  FROM information_schema.columns 
  WHERE table_schema = 'public' AND table_name = 'users';
  
  RAISE NOTICE 'Colonnes disponibles dans public.users: %', user_columns;
  
  -- Essayer d'ins√©rer l'utilisateur avec seulement l'ID (minimal)
  BEGIN
    INSERT INTO public.users (id) VALUES (test_user_id);
    RAISE NOTICE '‚úÖ Utilisateur cr√©√© dans public.users avec ID minimal';
  EXCEPTION WHEN OTHERS THEN
    RAISE NOTICE '‚ùå Impossible de cr√©er l''utilisateur: %', SQLERRM;
    RAISE NOTICE 'üîß Le trigger ne pourra pas fonctionner si public.users est requis';
    -- Continuer le test sans cr√©er l'utilisateur
  END;
  
  -- Essayer d'ins√©rer le driver minimal (m√™me si user n'existe pas, pour tester les contraintes)
  BEGIN
    INSERT INTO public.drivers (
      user_id,
      created_at,
      updated_at
    ) VALUES (
      test_user_id,
      NOW(),
      NOW()
    );
    
    RAISE NOTICE '‚úÖ SUCCESS! Driver cr√©√© avec le minimum de champs';
    RAISE NOTICE 'üéØ Le trigger peut fonctionner correctement';
    
  EXCEPTION WHEN OTHERS THEN
    RAISE NOTICE '‚ùå √âCHEC DRIVER - Erreur exacte: %', SQLERRM;
    RAISE NOTICE 'üîß Cette erreur doit √™tre r√©solue pour que le trigger fonctionne';
    error_message := SQLERRM;
  END;
  
  -- Nettoyer le test
  BEGIN
    DELETE FROM public.drivers WHERE user_id = test_user_id;
    DELETE FROM public.users WHERE id = test_user_id;
  EXCEPTION WHEN OTHERS THEN
    -- Ignorer les erreurs de nettoyage
  END;
  
  IF error_message IS NOT NULL THEN
    RAISE NOTICE '';
    RAISE NOTICE 'üìã ACTION REQUISE:';
    RAISE NOTICE '1. Identifier le champ probl√©matique dans l''erreur ci-dessus';
    RAISE NOTICE '2. Soit le rendre nullable, soit lui donner une valeur par d√©faut';
    RAISE NOTICE '3. Ou adapter le trigger pour fournir une valeur valide';
  ELSE
    RAISE NOTICE '';
    RAISE NOTICE 'üéâ EXCELLENT! La table est pr√™te pour le trigger automatique';
    RAISE NOTICE 'Vous pouvez maintenant utiliser le frontend sans probl√®me';
  END IF;
  
END $$;

-- üîç √âTAPE 5 : V√©rifier les contraintes CHECK qui pourraient bloquer
SELECT 
  'CONTRAINTES CHECK ACTIVES' as info,
  conname as constraint_name,
  pg_get_constraintdef(oid) as constraint_definition
FROM pg_constraint 
WHERE conrelid = 'public.drivers'::regclass 
AND contype = 'c'
ORDER BY conname;

-- üìù RAPPORT FINAL
SELECT '
üéØ R√âSUM√â DU DIAGNOSTIC:

1. Les contraintes FK montrent une possible duplication: 
   - current_vehicle_id (avec ON DELETE SET NULL) ‚úÖ
   - vehicle_id (sans ON DELETE SET NULL) ‚ö†Ô∏è

2. Si vehicle_id est NOT NULL sans valeur par d√©faut, cela bloque l''insertion.

3. Solutions possibles:
   a) Rendre vehicle_id nullable
   b) Lui donner une valeur par d√©faut  
   c) Adapter le trigger pour cr√©er un v√©hicule temporaire
   d) Utiliser uniquement current_vehicle_id

üöÄ Apr√®s ce diagnostic, le frontend pourra cr√©er des drivers automatiquement!
' as rapport;
