'use server'

import { SupabaseRole } from '@/lib/types/auth.types' // Utiliser le type depuis auth.types

// Définition des rôles disponibles
// Note: Ce n'est pas exporté directement car on ne peut pas exporter d'objets dans un fichier 'use server'
const ROLE_LABELS: { [key in SupabaseRole]: string } = {
  app_super_admin: 'Super Admin',
  app_admin: 'Admin',
  app_driver: 'Chauffeur',
  app_customer: 'Client',
  unauthorized: 'Non autorisé'
};

// Fonction pour obtenir les labels de rôles
export async function getRoleLabels() {
  return ROLE_LABELS;
}

// Fonction pour obtenir un label de rôle spécifique
export async function getRoleLabel(role: SupabaseRole | null | undefined): Promise<string> {
  if (!role) return ROLE_LABELS.unauthorized;
  return ROLE_LABELS[role] || ROLE_LABELS.unauthorized;
}

// Fonctions de vérification de rôle
export async function isAdmin(role?: SupabaseRole | null) {
  return role === 'app_admin' || role === 'app_super_admin';
}

export async function isSuperAdmin(role?: SupabaseRole | null) {
  return role === 'app_super_admin';
}

export async function isDriver(role?: SupabaseRole | null) {
  return role === 'app_driver';
}

export async function isCustomer(role?: SupabaseRole | null) {
  return role === 'app_customer';
}

// Fonction de vérification de rôle générique
export async function hasRole(role: SupabaseRole | null, requiredRole: SupabaseRole | SupabaseRole[]) {
  if (!role) return false;
  
  if (Array.isArray(requiredRole)) {
    return requiredRole.includes(role);
  }
  
  return role === requiredRole;
}

// Extraction du rôle d'un utilisateur
export async function getUserRole(user: any): Promise<SupabaseRole | null> {
  if (!user) return null;
  return (user.role as SupabaseRole) || null;
}

// Alias pour obtenir le rôle principal
export async function getPrimaryRole(user: any): Promise<SupabaseRole | null> {
  return getUserRole(user);
}
